[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "docurag-agent"
version = "0.1.0"
description = "A document-based RAG (Retrieval-Augmented Generation) agent for intelligent question answering"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "rucwhx", email = "your-email@example.com" },
]
keywords = ["rag", "retrieval", "nlp", "ai", "chatbot", "document-qa"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pandas>=2.0",
    "numpy>=1.24",
    "faiss-cpu>=1.7.4",
    "rank-bm25>=0.2.2",
    "jieba>=0.42.1",
    "pyyaml>=6.0.1",
    "sentence-transformers>=2.7.0",
    "FlagEmbedding>=1.2.10",
    "transformers>=4.43",
    "accelerate>=0.33",
    "gradio>=4.31",
    "fastapi>=0.111",
    "uvicorn>=0.30",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.4.0",
    "black>=24.0",
    "isort>=5.13",
    "mypy>=1.10",
    "pytest>=8.0",
    "pytest-cov>=5.0",
    "pre-commit>=3.7",
]
gpu = [
    "faiss-gpu>=1.7.4",
]
test = [
    "pytest>=8.0",
    "pytest-cov>=5.0",
    "pytest-asyncio>=0.23",
]

[project.urls]
Homepage = "https://github.com/rucwhx/docurag-agent"
Repository = "https://github.com/rucwhx/docurag-agent"
Issues = "https://github.com/rucwhx/docurag-agent/issues"

[project.scripts]
docurag-serve = "docurag.app.api:main"
docurag-ui = "docurag.app.ui:main"

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["docurag"]

# Black configuration
[tool.black]
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "rank_bm25.*",
    "jieba.*",
    "sentence_transformers.*",
    "FlagEmbedding.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
